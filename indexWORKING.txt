<!DOCTYPE html>
<html>
<head>
    <title>Dynamic Map with Circle and Drawing Tools</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <!-- Leaflet.Draw CSS and JS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
        }
        #map {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <script>
        // Extract parameters from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const lat = parseFloat(urlParams.get('lat')) || 0; // Default to 0 if not provided
        const lon = parseFloat(urlParams.get('lon')) || 0; // Default to 0 if not provided
        const radius = parseFloat(urlParams.get('radius')) || 0; // Default to 0 if not provided

        // Initialize the map
        const map = L.map('map').setView([lat, lon], 13);

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);

        // Add a circle to represent uncertainty
        if (radius > 0) {
            L.circle([lat, lon], {
                color: 'red',
                fillColor: '#f03',
                fillOpacity: 0.5,
                radius: radius // Radius in meters
            }).addTo(map);
        }

        // Add drawing tools
        const drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        const drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems,
            },
            draw: {
                polygon: true,
                polyline: true,
                rectangle: true,
                circle: true,
                marker: true,
            },
        });

        map.addControl(drawControl);

        // Handle events for created shapes
        map.on('draw:created', function (event) {
            const layer = event.layer;
            drawnItems.addLayer(layer);

            // Example: Log the shape's GeoJSON to the console
            console.log(JSON.stringify(layer.toGeoJSON()));
        });
    </script>
</body>
</html>
